This is a demo project, it is based on the famous Spring Pet clinic, but customised to use Grails 2.x.

The main objective of this project is to introduce Docker as part of Development lifecycle. [Later just introduces to deployment lifecycle]


Getting Started
###############


1. Install the Pre-requisites
    Download and install Docker Toolbox, Virtual box

2. Start docker quick start terminal, to start docker machine, docker deamon etc

3. Verify docker machine status by running:
   "$> docker-machine status"

4. Get docker-machine ip address by running:
   "$> docker-machine ip"

5. Verify docker installation by running
   $> docker run hello-world
   After images get downloaded, you should see a message "Hello from Docker." along with other helpful details

All set to go!!


Project details
###############

Some important files:

->  grails-petclinic
        It is the actual application folder.
      -/conf/DataSource.groovy
            This file defines database strings. It uses environment variables to connect to DB

-> Dockerfile
        The file used to build the docker "Dev image".
        It can be enhanced to include "build-time dependencies" like libraries/tools/frameworks softwares etc.
        The image built is for development and testing.

-> docker-compose.yml
        It defines the environment necessary for running the required containers ie "app" and "db" for app to work.
        you can simply start the entire environment by using:
        "$> docker-compose up"
        This file defines all the necessary configuration to start the containers with the application:
        1. Exposing the ports 8080 tomcat, and 9090 standalone for run-app if required
        2. Mounts the volumes from host
        3. sets up links between app and db containers
        4. provides the configuration necessary for db to run
        5. "app" based on dev image built from docker file

- README
    This file :)


Running the Application
#######################

1. Build the dev image
   $> docker build -t srik/dev-image .

2. Start the required environment using
   $>  docker-compose up

3. verify the containers that have been started
   $> docker ps
   two containers should have been started eg: app: dockergrailsapp_app_1, db: dockergrailsapp_db_1

4. verify tomcat is running from the app container
    1. get the ip of docker-machine using "docker-machine ip"
    2. open a browser and goto http://<docker machine ip got above>:8080
        you should see familiar tomcat homepage.

5. connect bash to the running app container
    $> docker exec -it dockergrailsapp_app_1 bash
    you should now inside the container
        root@<containerid>:/

6. go to the mounted application folder:
    root@../> cd /grails-petclinic

7. run the grails application directly on port 9090
    grails-petclinic> ./grailsw -Dserver.port=9090 run-app

    on host chrome browser:
    http://<docker machine ip got above>:9090/petclinic

OR

8. build a warfile and copy to the tomcat running on 8080
    build war :  cd /grails-petclinic && dos2unix grailsw && ./grailsw war
    copy war  :  cp /grails-petclinic/target/*.war /usr/local/tomcat/webapps/

    on host chrome browser:
    http://<docker machine ip got above>:8080/petclinic

Enjoy!!! Go Docker!!!





OTHER USEFUL INSTRUCTIONS
#########################


Create or Upadate Image from a running container
------------------------------------------------

Once you’ve completed those instructions you can disconnect, or detach, from the shell without exiting use the escape sequence Ctrl-p + Ctrl-q.

Finally it’s time to commit our changes to a named image. This command converts the container 9c09acd48a25 to an image with the name fedora-base-with-git:

docker commit 9c09acd48a25 srik/app


PUBLISHING IMAGES TO DOCKER HUB
###############################

docker login --username=srik --email=srikanth.nutigattu@gmail.com
docker push srik/app



ADDITIONAL CONSIDERATIONS
#########################

ON WINDOWS
----------
VirtualBox Guest Additions

Alternatively, Boot2Docker includes the VirtualBox Guest Additions built in for the express purpose of using VirtualBox folder sharing.

The first of the following share names that exists (if any) will be automatically mounted at the location specified:

Users share at /Users
/Users share at /Users
c/Users share at /c/Users
/c/Users share at /c/Users
c:/Users share at /c/Users



If some other path or share is desired, it can be mounted at run time by doing something like:
(From stackoverflow:)
$ mount -t vboxsf -o uid=1000,gid=50 your-other-share-name /some/mount/location
It is also important to note that in the future, the plan is to have any share which is created in VirtualBox with the "automount" flag turned on be mounted during boot at the directory of the share name (ie, a share named home/jsmith would be automounted at /home/jsmith).
In case it isn't already clear, the Linux host support here is currently hazy. You can share your /home or /home/jsmith directory as Users or one of the other supported automount locations listed above, but note that you will then need to manually convert your docker run -v /home/...:... bind-mount host paths accordingly (ie, docker run -v /Users/...:...). As noted in the previous paragraph however, this is likely to change in the future as soon as a more suitable/scalable solution is found and implemented.

Note:

If mounting windows git checkout file to unix, either retain the unix line endings or use "dos2unix" to convert
    $/> apt-get install dos2unix
    $/> dos2unix grailsw